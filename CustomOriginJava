Refer quickstart notes to create sample custom origin template , build , deploy and run the custom origin.
This document covers more at code level.
[https://github.com/streamsets/tutorials/blob/master/tutorial-origin/readme.md]

1. All source extends BaseSource class.[SampleSource.java => here's were main logic resides.]
    public abstract class SampleSource extends BaseSource {

2. Gives access to the UI configuration of the stage provided by the {@link SampleDSource} class.
    public abstract String getConfig();

3. SDC calls the init() method when validating and running a pipeline.
  @Override
  protected List<ConfigIssue> init() {
  // Validate configuration values and open any required resources.
  List<ConfigIssue> issues = super.init();

  if (getConfig().equals("invalidValue")) {
  issues.add(
      getContext().createConfigIssue(
          Groups.SAMPLE.name(), "config", Errors.SAMPLE_00, "Here's what's wrong..."
          )
  );
  }

  // If issues is not empty, the UI will inform the user of each configuration issue in the list.
  return issues;
  }

4. SDC calls destroy() during validation, and when a pipeline is stopped:

  @Override
  public void destroy() {
    // Clean up any open resources.
    super.destroy();
    }

5. The produce() method is where the action is. SDC will call this repeatedly to create batches of records.
  The sample shows how to create records with a single field named fieldName, containing a string value, Some Value.

  @Override
  public String produce(String lastSourceOffset, int maxBatchSize, BatchMaker batchMaker) throws StageException {
  // Offsets can vary depending on the data source. Here we use an integer as an example only.
  long nextSourceOffset = 0;
  if (lastSourceOffset != null) {
    nextSourceOffset = Long.parseLong(lastSourceOffset);
  }

  int numRecords = 0;

  // TODO: As the developer, implement your logic that reads from a data source in this method.

  // Create records and add to batch. Records must have a string id. This can include the source offset
  // or other metadata to help uniquely identify the record itself.
  while (numRecords < maxBatchSize) {
    Record record = getContext().createRecord("some-id::" + nextSourceOffset);
    Map<String, Field> map = new HashMap<>();
    map.put("fieldName", Field.create("Some Value"));
    record.set(Field.create(map));
    batchMaker.addRecord(record);
    ++nextSourceOffset;
    ++numRecords;
  }

  return String.valueOf(nextSourceOffset);
  }

6. Import Logger to the stage. Add the logger in SampleSource.java class.
   import org.slf4j.Logger;
   import org.slf4j.LoggerFactory;

   public abstract class SampleSource extends BaseSource {

    private static final Logger LOG = LoggerFactory.getLogger(SampleSource.class);


7. Add some log info in init() method

  protected List<ConfigIssue> init() {
  // Validate configuration values and open any required resources.
  List<ConfigIssue> issues = super.init();

  LOG.info("Initialized with config: {}", getConfig());


8. Configuration settings in the origin stage.
  Origin configuration is handled in SampleDSource.java

  @StageDef(
    version = 1,
    label = "Git Commit Log",
    description = "",
    icon = "git.png",
    execution = ExecutionMode.STANDALONE,
    recordsByRef = true,
    resetOffset = true,
    onlineHelpRefUrl = ""
    )
9. Configuration setting in origin stage.

  @ConfigDef(
 required = true,
 type = ConfigDef.Type.STRING,
 defaultValue = "",
 label = "Git Repository Directory",
 description = "Location of a local Git repository, for example /src/some/dir",
 displayPosition = 10,
 group = "SAMPLE"
  )
  public String directory;

  /** {@inheritDoc} */
  @Override
  public String getDirectory() {
  return directory;
  }

10. Incorporate config setting in SampleSource.java class.
  Replace the line public abstract String getConfig(); with below lines

  public abstract String getDirectory();
